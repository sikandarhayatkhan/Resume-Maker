head	1.15;
access;
symbols;
locks
	chris:1.15; strict;
comment	@# @;


1.15
date	2017.06.04.16.48.57;	author chris;	state Exp;
branches;
next	1.14;

1.14
date	2017.06.04.14.20.41;	author chris;	state Exp;
branches;
next	1.13;

1.13
date	2017.06.04.14.20.05;	author chris;	state Exp;
branches;
next	1.12;

1.12
date	2017.06.04.14.13.45;	author chris;	state Exp;
branches;
next	1.11;

1.11
date	2017.06.04.14.09.58;	author chris;	state Exp;
branches;
next	1.10;

1.10
date	2017.06.04.13.59.00;	author chris;	state Exp;
branches;
next	1.9;

1.9
date	2017.06.04.13.58.14;	author chris;	state Exp;
branches;
next	1.8;

1.8
date	2017.06.04.13.34.42;	author chris;	state Exp;
branches;
next	1.7;

1.7
date	2017.06.04.13.33.28;	author chris;	state Exp;
branches;
next	1.6;

1.6
date	2017.06.04.13.30.34;	author chris;	state Exp;
branches;
next	1.5;

1.5
date	2017.06.04.13.23.21;	author chris;	state Exp;
branches;
next	1.4;

1.4
date	2017.05.29.19.27.26;	author chris;	state Exp;
branches;
next	1.3;

1.3
date	2017.05.29.19.25.33;	author chris;	state Exp;
branches;
next	1.2;

1.2
date	2017.05.29.19.14.15;	author chris;	state Exp;
branches;
next	1.1;

1.1
date	2017.05.29.14.43.31;	author chris;	state Exp;
branches;
next	;


desc
@vim
@


1.15
log
@(rcsvers.vim) modified outside of vim.
@
text
@// test/index.js of module pug-pdf

'use strict';

const pugpdf = require('../'),
   fs = require('fs');

function helper(input, output, options) {

    console.log('Creating PDF file %s from PUG template %s...', output, input);

    const outputStream = fs.createWriteStream(output);

    outputStream.on('finish', () => {
        console.log('   ... %s complete', output);
    });

    const inputStream = fs.createReadStream(input);
    inputStream.on('error', (err) => {
        console.log('   ... error %s processing templage %s', err.message, input);
        console.error(err);
    });

    inputStream
          .pipe(pugpdf(options))
          .pipe(outputStream);

}

const dir = __dirname + '/';

const options = {
    // phantomPath -- use default
    cssPath: __dirname + '/test.css',
    paperFormat: 'A4',
    paperOrientation: 'portrait',
    paperBorder: '1cm',
    renderDelay: 500,
    locals: {},
};

helper(dir + 'simple.pug', dir + 'simple.pdf', options);

//helper(dir + 'complex.pug', dir + 'complex.pdf', options);

// Need to clone options object, otherwise changes to it 
// affect all calls to helper().
const options2 = Object.assign({}, options);
options2.paperOrientation = 'landscape';
//helper(dir + 'images.pug', dir + 'images.pdf', options2);
@


1.14
log
@(rcsvers.vim) modified outside of vim.
@
text
@d44 1
a44 1
helper(dir + 'complex.pug', dir + 'complex.pdf', options);
d46 5
a50 2
options.paperOrientation = 'landscape';
helper(dir + 'images.pug', dir + 'images.pdf', options);
@


1.13
log
@(rcsvers.vim) modified outside of vim.
@
text
@d37 1
a37 1
    paperBorder = '1cm'
@


1.12
log
@(rcsvers.vim) modified outside of vim.
@
text
@d8 1
a8 1
function helper(input, output) {
d25 1
a25 1
          .pipe(pugpdf())
d32 9
a40 1
helper(dir + 'simple.pug', dir + 'simple.pdf');
d42 1
a42 1
helper(dir + 'complex.pug', dir + 'complex.pdf');
d44 4
a47 1
helper(dir + 'images.pug', dir + 'images.pdf');
@


1.11
log
@(rcsvers.vim) modified outside of vim.
@
text
@d18 1
a18 1
    inputStream = fs.createReadStream(input);
d36 1
a36 1
helper(dir + 'images.pug', dir + 'image.pdf');
@


1.10
log
@(rcsvers.vim) modified outside of vim.
@
text
@d18 7
a24 1
    fs.createReadStream(input)
d36 1
a36 1

@


1.9
log
@(rcsvers.vim) modified outside of vim.
@
text
@d14 2
a15 2
    outputStream.on('finish' () => {
        console.log('   ... %s complete');
@


1.8
log
@(rcsvers.vim) modified outside of vim.
@
text
@d10 1
a10 1
    console.log('Creating PDF file ' + output ' + from PUG template ' + input);
d13 4
@


1.7
log
@(rcsvers.vim) modified outside of vim.
@
text
@d1 2
a2 1
/* jshint node: true */
d10 2
a11 1
    console.log('Creating PDF file ' + output_file ' + from PUG template ' + input_file);
@


1.6
log
@(rcsvers.vim) modified outside of vim.
@
text
@d9 2
a10 1
    var outputStream = fs.createWriteStream(output);
a23 1
//helper(new URL('https://bbc.co.uk'), dir + 'bbc.pdf');
@


1.5
log
@(rcsvers.vim) modified outside of vim.
@
text
@d23 1
a23 1
helper('https://bbc.co.uk', dir + 'bbc.pdf');
@


1.4
log
@(rcsvers.vim) modified outside of vim.
@
text
@d4 11
a14 31
var pugpdf = require('../'),
   assert = require('assert'),
   fs = require('fs'),
   tmp = require('tmp'),
   through = require('through'),
   should = require('should');

tmp.setGracefulCleanup();

function helper(path, done) {
  tmp.file({
      postfix: '.pdf',
      template: '/tmp' + path + '.XXXXXX.pdf',
      keep: true,
      discardDescriptor: true
  }, function(err, tmpPdfPath, tmpPdfFd) {
    should.not.exist(err);
    //fs.close(tmpPdfFd);

    var outputStream = fs.createWriteStream(tmpPdfPath);

    fs.createReadStream(__dirname+path).pipe(pugpdf()).pipe(outputStream);

    outputStream.on('finish', function() {
      fs.readFile(tmpPdfPath, {encoding: 'utf8'}, function (err, data) { 
        should.not.exist(err);
        data.length.should.be.above(0);
        done();
      });
    });
  });
d17 8
a24 13
describe('simple pug file without locals to pdf', function() {
  it('should generate a non-empty PDF', function(done) {
    this.timeout(5000);
    helper('/simple.pug', done);
  });
});

describe('complex pug file without locals to pdf', function() {
  it('should generate a non-empty PDF', function(done) {
    this.timeout(5000);
    helper('/complex.pug', done);
  });
});
@


1.3
log
@(rcsvers.vim) modified outside of vim.
@
text
@d16 2
a17 1
      template: '/tmp' + path + '.pdf',
@


1.2
log
@(rcsvers.vim) modified outside of vim.
@
text
@d11 1
a11 1
//tmp.setGracefulCleanup();
d14 5
a18 1
  tmp.file({postfix: '.pdf'}, function(err, tmpPdfPath, tmpPdfFd) {
d20 1
a20 1
    fs.close(tmpPdfFd);
@


1.1
log
@vim
@
text
@d4 6
a9 6
var jadepdf = require('../')
  , assert = require('assert')
  , fs = require('fs')
  , tmp = require('tmp')
  , through = require('through')
  , should = require('should');
d11 1
a11 1
tmp.setGracefulCleanup();
d20 1
a20 1
    fs.createReadStream(__dirname+path).pipe(jadepdf()).pipe(outputStream);
d32 1
a32 1
describe('simple jade file without locals to pdf', function() {
d35 1
a35 1
    helper('/simple.jade', done);
d39 1
a39 1
describe('complex jade file without locals to pdf', function() {
d42 1
a42 1
    helper('/complex.jade', done);
@
