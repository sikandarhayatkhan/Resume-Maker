head	1.1;
access;
symbols;
locks
	chris:1.1; strict;
comment	@# @;


1.1
date	2017.05.29.14.43.31;	author chris;	state Exp;
branches;
next	;


desc
@vim
@


1.1
log
@vim
@
text
@#!/usr/bin/env node

var fs = require('fs')
  , jadepdf = require('../')
  , program = require('commander');

program.version(require('../package.json').version)
  .usage('[options] <jade-file-path>')
  .option('<jade-file-path>', "Path of the jade file to convert")
  .option('-p, --phantom-path [path]', "Path to phantom binary")
  .option('-s, --css-path [path]', "Path to custom CSS file")
  .option('-f, --paper-format [format]', "'A3', 'A4', 'A5', 'Legal', 'Letter' or 'Tabloid'")
  .option('-r, --paper-orientation [orientation]', "'portrait' or 'landscape'")
  .option('-b, --paper-border [measurement]', "Supported dimension units are: 'mm', 'cm', 'in', 'px'")
  .option('-d, --render-delay [millis]', "Delay before rendering the PDF (give HTML and CSS a chance to load)")
  .option('-o, --out [path]', "Path of where to save the PDF")
  .parse(process.argv);

program.out = program.out || program.args[0].replace(/\.(jade)/g, '') + '.pdf';

var options = {
  phantomPath: program.phantomPath
, cssPath: program.cssPath
, paperFormat: program.paperFormat
, paperOrientation: program.paperOrientation
, paperBorder: program.paperBorder
, renderDelay: program.renderDelay
};

var outputStream = fs.createWriteStream(program.out);
fs.createReadStream(program.args[0]).pipe(jadepdf(options)).pipe(outputStream);
outputStream.on('finish', function() {
  fs.realpath(program.out, function (err, path) {
    if (err) return console.error(err);
    console.log('Created PDF file at', path);
  });
});
@
