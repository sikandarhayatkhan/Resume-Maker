head	1.2;
access;
symbols;
locks
	chris:1.2; strict;
comment	@# @;


1.2
date	2017.06.04.16.48.57;	author chris;	state Exp;
branches;
next	1.1;

1.1
date	2017.05.29.18.34.38;	author chris;	state Exp;
branches;
next	;


desc
@vim
@


1.2
log
@(rcsvers.vim) modified outside of vim.
@
text
@#!/usr/bin/env node

// CLI interface for pug-pdf

const fs = require('fs'),
	pugpdf = require('../'),
	program = require('commander');

program.version(require('../package.json').version)
	.usage('[options] <pug-file-path>')
	.option('<pug-file-path>', "Path of the pug file to convert")
	.option('-p, --phantom-path [path]', "Path to phantom binary")
	.option('-s, --css-path [path]', "Path to custom CSS file")
	.option('-f, --paper-format [format]', "'A3', 'A4', 'A5', 'Legal', 'Letter' or 'Tabloid'")
	.option('-r, --paper-orientation [orientation]', "'portrait' or 'landscape'")
	.option('-b, --paper-border [measurement]', "Supported dimension units are: 'mm', 'cm', 'in', 'px'")
	.option('-o, --out [path]', "Path of where to save the PDF. Defaults to <pug-file-path> with .pug extension changed to .pdf.")
	.parse(process.argv);

const infile = program.args[0];

// Add .pdf even if infile doesn't end in .pug
program.out = program.out || infile.replace(/\.pug$/, '') + '.pdf';
program.out = fs.realpathSync(program.out);

const options = {
	phantomPath: program.phantomPath,
	cssPath: program.cssPath,
	paperFormat: program.paperFormat,
	paperOrientation: program.paperOrientation,
	paperBorder: program.paperBorder,
};

const outputStream = fs.createWriteStream(program.out);

fs.createReadStream(infile)
	.pipe(pugpdf(options))
	.pipe(outputStream);

outputStream.on('finish', function() {
	console.log('Created PDF file at', path);
});
@


1.1
log
@vim
@
text
@d3 5
a7 3
var fs = require('fs')
  , pugpdf = require('../')
  , program = require('commander');
d10 22
a31 20
  .usage('[options] <pug-file-path>')
  .option('<pug-file-path>', "Path of the pug file to convert")
  .option('-p, --phantom-path [path]', "Path to phantom binary")
  .option('-s, --css-path [path]', "Path to custom CSS file")
  .option('-f, --paper-format [format]', "'A3', 'A4', 'A5', 'Legal', 'Letter' or 'Tabloid'")
  .option('-r, --paper-orientation [orientation]', "'portrait' or 'landscape'")
  .option('-b, --paper-border [measurement]', "Supported dimension units are: 'mm', 'cm', 'in', 'px'")
  .option('-d, --render-delay [millis]', "Delay before rendering the PDF (give HTML and CSS a chance to load)")
  .option('-o, --out [path]', "Path of where to save the PDF")
  .parse(process.argv);

program.out = program.out || program.args[0].replace(/\.(pug)/g, '') + '.pdf';

var options = {
  phantomPath: program.phantomPath
, cssPath: program.cssPath
, paperFormat: program.paperFormat
, paperOrientation: program.paperOrientation
, paperBorder: program.paperBorder
, renderDelay: program.renderDelay
d34 6
a39 2
var outputStream = fs.createWriteStream(program.out);
fs.createReadStream(program.args[0]).pipe(pugpdf(options)).pipe(outputStream);
d41 1
a41 4
  fs.realpath(program.out, function (err, path) {
    if (err) return console.error(err);
    console.log('Created PDF file at', path);
  });
@
